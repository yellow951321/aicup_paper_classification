{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "import sys\n",
    "import warnings\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "from keras.preprocessing import text, sequence\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "from sklearn import metrics, preprocessing\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras.models import Sequential\n",
    "from keras.layers.recurrent import LSTM, GRU\n",
    "from keras.layers.core import Dense, Activation, Dropout\n",
    "from keras.layers.embeddings import Embedding\n",
    "from keras.layers.normalization import BatchNormalization\n",
    "from keras.utils import np_utils\n",
    "from keras.callbacks import EarlyStopping\n",
    "from keras import optimizers\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read data\n",
    "data = pd.read_csv(\"data/task2_trainset.csv\")\n",
    "test = pd.read_csv(\"data/task2_public_testset.csv\")\n",
    "submission = pd.read_csv(\"data/task2_sample_submission.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Title</th>\n",
       "      <th>Abstract</th>\n",
       "      <th>Authors</th>\n",
       "      <th>Categories</th>\n",
       "      <th>Created Date</th>\n",
       "      <th>Task 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>D00001</td>\n",
       "      <td>A Brain-Inspired Trust Management Model to Ass...</td>\n",
       "      <td>Rapid popularity of Internet of Things (IoT) a...</td>\n",
       "      <td>Mahmud/Kaiser/Rahman/Rahman/Shabut/Al-Mamun/Hu...</td>\n",
       "      <td>cs.CR/cs.AI/q-bio.NC</td>\n",
       "      <td>2018-01-11</td>\n",
       "      <td>THEORETICAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>D00002</td>\n",
       "      <td>On Efficient Computation of Shortest Dubins Pa...</td>\n",
       "      <td>In this paper, we address the problem of compu...</td>\n",
       "      <td>Sadeghi/Smith</td>\n",
       "      <td>cs.SY/cs.RO/math.OC</td>\n",
       "      <td>2016-09-21</td>\n",
       "      <td>THEORETICAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>D00003</td>\n",
       "      <td>Data-driven Upsampling of Point Clouds</td>\n",
       "      <td>High quality upsampling of sparse 3D point clo...</td>\n",
       "      <td>Zhang/Jiang/Yang/Yamakawa/Shimada/Kara</td>\n",
       "      <td>cs.CV</td>\n",
       "      <td>2018-07-07</td>\n",
       "      <td>ENGINEERING</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>D00004</td>\n",
       "      <td>Accessibility or Usability of InteractSE? A He...</td>\n",
       "      <td>Internet is the main source of information now...</td>\n",
       "      <td>Aqle/Khowaja/Al-Thani</td>\n",
       "      <td>cs.HC</td>\n",
       "      <td>2018-08-29</td>\n",
       "      <td>EMPIRICAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>D00005</td>\n",
       "      <td>Spatio-Temporal Facial Expression Recognition ...</td>\n",
       "      <td>Automated Facial Expression Recognition (FER) ...</td>\n",
       "      <td>Hasani/Mahoor</td>\n",
       "      <td>cs.CV</td>\n",
       "      <td>2017-03-20</td>\n",
       "      <td>ENGINEERING</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                              Title  \\\n",
       "0  D00001  A Brain-Inspired Trust Management Model to Ass...   \n",
       "1  D00002  On Efficient Computation of Shortest Dubins Pa...   \n",
       "2  D00003             Data-driven Upsampling of Point Clouds   \n",
       "3  D00004  Accessibility or Usability of InteractSE? A He...   \n",
       "4  D00005  Spatio-Temporal Facial Expression Recognition ...   \n",
       "\n",
       "                                            Abstract  \\\n",
       "0  Rapid popularity of Internet of Things (IoT) a...   \n",
       "1  In this paper, we address the problem of compu...   \n",
       "2  High quality upsampling of sparse 3D point clo...   \n",
       "3  Internet is the main source of information now...   \n",
       "4  Automated Facial Expression Recognition (FER) ...   \n",
       "\n",
       "                                             Authors            Categories  \\\n",
       "0  Mahmud/Kaiser/Rahman/Rahman/Shabut/Al-Mamun/Hu...  cs.CR/cs.AI/q-bio.NC   \n",
       "1                                      Sadeghi/Smith   cs.SY/cs.RO/math.OC   \n",
       "2             Zhang/Jiang/Yang/Yamakawa/Shimada/Kara                 cs.CV   \n",
       "3                              Aqle/Khowaja/Al-Thani                 cs.HC   \n",
       "4                                      Hasani/Mahoor                 cs.CV   \n",
       "\n",
       "  Created Date       Task 2  \n",
       "0   2018-01-11  THEORETICAL  \n",
       "1   2016-09-21  THEORETICAL  \n",
       "2   2018-07-07  ENGINEERING  \n",
       "3   2018-08-29    EMPIRICAL  \n",
       "4   2017-03-20  ENGINEERING  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Title</th>\n",
       "      <th>Abstract</th>\n",
       "      <th>Authors</th>\n",
       "      <th>Categories</th>\n",
       "      <th>Created Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T00001</td>\n",
       "      <td>Cheating-Resilient Incentive Scheme for Mobile...</td>\n",
       "      <td>Mobile Crowdsensing is a promising paradigm fo...</td>\n",
       "      <td>Zhao/Yang/Yu/Yao/Lin/Li</td>\n",
       "      <td>cs.NI/cs.CR</td>\n",
       "      <td>2017-01-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T00002</td>\n",
       "      <td>10 Inventions on Key Guides and Keyboard Templ...</td>\n",
       "      <td>A keyboard has many function keys and each fun...</td>\n",
       "      <td>Mishra</td>\n",
       "      <td>cs.HC</td>\n",
       "      <td>2013-10-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T00003</td>\n",
       "      <td>Approximating Flexibility in Distributed Energ...</td>\n",
       "      <td>With increasing availability of communication ...</td>\n",
       "      <td>Kundu/Kalsi/Backhaus</td>\n",
       "      <td>cs.SY/math.OC</td>\n",
       "      <td>2018-03-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T00004</td>\n",
       "      <td>A New Perspective on Clustered Planarity as a ...</td>\n",
       "      <td>The clustered planarity problem (c-planarity) ...</td>\n",
       "      <td>Bläsius/Rutter</td>\n",
       "      <td>cs.DS/cs.DM/math.CO</td>\n",
       "      <td>2015-06-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T00005</td>\n",
       "      <td>Multitask Evolution with Cartesian Genetic Pro...</td>\n",
       "      <td>We introduce a genetic programming method for ...</td>\n",
       "      <td>Scott/De Jong</td>\n",
       "      <td>cs.NE</td>\n",
       "      <td>2017-02-07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id                                              Title  \\\n",
       "0  T00001  Cheating-Resilient Incentive Scheme for Mobile...   \n",
       "1  T00002  10 Inventions on Key Guides and Keyboard Templ...   \n",
       "2  T00003  Approximating Flexibility in Distributed Energ...   \n",
       "3  T00004  A New Perspective on Clustered Planarity as a ...   \n",
       "4  T00005  Multitask Evolution with Cartesian Genetic Pro...   \n",
       "\n",
       "                                            Abstract                  Authors  \\\n",
       "0  Mobile Crowdsensing is a promising paradigm fo...  Zhao/Yang/Yu/Yao/Lin/Li   \n",
       "1  A keyboard has many function keys and each fun...                   Mishra   \n",
       "2  With increasing availability of communication ...     Kundu/Kalsi/Backhaus   \n",
       "3  The clustered planarity problem (c-planarity) ...           Bläsius/Rutter   \n",
       "4  We introduce a genetic programming method for ...            Scott/De Jong   \n",
       "\n",
       "            Categories Created Date  \n",
       "0          cs.NI/cs.CR   2017-01-08  \n",
       "1                cs.HC   2013-10-11  \n",
       "2        cs.SY/math.OC   2018-03-14  \n",
       "3  cs.DS/cs.DM/math.CO   2015-06-18  \n",
       "4                cs.NE   2017-02-07  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>THEORETICAL</th>\n",
       "      <th>ENGINEERING</th>\n",
       "      <th>EMPIRICAL</th>\n",
       "      <th>OTHERS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T00001</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T00002</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T00003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T00004</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T00005</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  order_id  THEORETICAL  ENGINEERING  EMPIRICAL  OTHERS\n",
       "0   T00001            0            0          0       0\n",
       "1   T00002            0            0          0       0\n",
       "2   T00003            0            0          0       0\n",
       "3   T00004            0            0          0       0\n",
       "4   T00005            0            0          0       0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data preprocessing\n",
    "\n",
    "if not sys.warnoptions:\n",
    "    warnings.simplefilter(\"ignore\")\n",
    "\n",
    "stop_words = set(stopwords.words('english'))\n",
    "re_stop_words = re.compile(r\"\\b(\" + \"|\".join(stop_words) + \")\\\\W\", re.I)\n",
    "def removeStopWords(sentence):\n",
    "    global re_stop_words\n",
    "    return re_stop_words.sub(\" \", sentence)\n",
    "\n",
    "stemmer = SnowballStemmer(\"english\")\n",
    "def stemming(sentence):\n",
    "    stemSentence = \"\"\n",
    "    for word in sentence.split():\n",
    "        stem = stemmer.stem(word)\n",
    "        stemSentence += stem\n",
    "        stemSentence += \" \"\n",
    "    stemSentence = stemSentence.strip()\n",
    "    return stemSentence\n",
    "\n",
    "def cleanPunc(sentence): #function to clean the word of any punctuation or special characters\n",
    "    cleaned = re.sub(r'[?|!|\\'|\"|#]',r'',sentence)\n",
    "    cleaned = re.sub(r'[.|,|)|(|\\|/]',r' ',cleaned)\n",
    "    cleaned = cleaned.strip()\n",
    "    cleaned = cleaned.replace(\"\\n\",\" \")\n",
    "    return cleaned\n",
    "\n",
    "def keepAlpha(sentence):\n",
    "    alpha_sent = \"\"\n",
    "    for word in sentence.split():\n",
    "        alpha_word = re.sub('[^a-z A-Z]+', ' ', word)\n",
    "        alpha_sent += alpha_word\n",
    "        alpha_sent += \" \"\n",
    "    alpha_sent = alpha_sent.strip()\n",
    "    return alpha_sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['THEORETICAL'], ['ENGINEERING'], ['EMPIRICAL'], ['THEORETICAL ENGINEERING'], ['ENGINEERING EMPIRICAL'], ['THEORETICAL EMPIRICAL'], ['OTHERS'], ['THEORETICAL ENGINEERING EMPIRICAL']]\n"
     ]
    }
   ],
   "source": [
    "# get all target labels\n",
    "categories = []\n",
    "for item, count in data['Task 2'].value_counts().iteritems():\n",
    "    categories.append([item])\n",
    "print(categories)\n",
    "encoder = preprocessing.OneHotEncoder()\n",
    "encoder.fit(categories)\n",
    "\n",
    "def arrayOneHotEncoder(label):\n",
    "    global encoder\n",
    "    return encoder.transform([[label]]).toarray()[0]\n",
    "\n",
    "def arrayToDataFrame(array):\n",
    "    df = pd.DataFrame(columns=['label1', 'label2', 'label3', 'label4', 'label5', 'label6', 'label7', 'label8'])\n",
    "    for row in array:\n",
    "        df.loc[-1] = row  # adding a row\n",
    "        df.index = df.index + 1  # shifting index\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 0. 1. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 1. 0.]]\n"
     ]
    }
   ],
   "source": [
    "print(encoder.transform([['THEORETICAL'], ['THEORETICAL ENGINEERING']]).toarray())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2196018it [01:44, 21052.08it/s]\n"
     ]
    }
   ],
   "source": [
    "# get glove coefficients\n",
    "from tqdm import tqdm\n",
    "embeddings_index = {}\n",
    "f = open('tools/glove.840B.300d.txt', encoding=\"utf8\")\n",
    "for line in tqdm(f):\n",
    "    values = line.split(' ')\n",
    "    word = values[0]\n",
    "    coefs = np.asarray(values[1:], dtype='float32')\n",
    "    embeddings_index[word] = coefs\n",
    "f.close()\n",
    "\n",
    "# create a tokenizer \n",
    "token = text.Tokenizer()\n",
    "token.fit_on_texts(embeddings_index.keys())\n",
    "word_index = token.word_index\n",
    "\n",
    "# create token-embedding mapping\n",
    "embedding_matrix = np.zeros((len(word_index) + 1, 300))\n",
    "for word, i in word_index.items():\n",
    "    embedding_vector = embeddings_index.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[i] = embedding_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.          0.          0.         ...  0.          0.\n",
      "   0.        ]\n",
      " [-0.62684     0.72842997  0.47222    ... -0.16216999  0.16379\n",
      "   0.025549  ]\n",
      " [-0.24479    -0.11817    -0.7141     ... -0.57435     0.16491\n",
      "   0.59109002]\n",
      " ...\n",
      " [ 0.073032   -1.02939999 -0.015436   ...  0.42264    -0.11333\n",
      "   0.16125   ]\n",
      " [ 0.21214999 -0.99456     1.17820001 ...  0.93427002 -0.93286002\n",
      "  -0.51479   ]\n",
      " [-0.07969    -0.22905     0.80365998 ... -0.083561    0.48532\n",
      "  -0.7313    ]]\n"
     ]
    }
   ],
   "source": [
    "print(embedding_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train test split\n",
    "train, valid = train_test_split(data, random_state=42, test_size=0.25, shuffle=True)\n",
    "X_train = train['Abstract']\n",
    "X_valid = valid['Abstract']\n",
    "\n",
    "# clean unusabe words and stemming\n",
    "X_train = X_train.str.lower()\n",
    "X_train = X_train.apply(cleanPunc)\n",
    "X_train = X_train.apply(keepAlpha)\n",
    "X_train = X_train.apply(removeStopWords)\n",
    "X_train = X_train.apply(stemming)\n",
    "\n",
    "X_valid = X_valid.str.lower()\n",
    "X_valid = X_valid.apply(cleanPunc)\n",
    "X_valid = X_valid.apply(keepAlpha)\n",
    "X_valid = X_valid.apply(removeStopWords)\n",
    "X_valid = X_valid.apply(stemming)\n",
    "\n",
    "# convert text to sequence of tokens and pad them to ensure equal length vectors \n",
    "X_train_seq = sequence.pad_sequences(token.texts_to_sequences(X_train), maxlen=70)\n",
    "X_valid_seq = sequence.pad_sequences(token.texts_to_sequences(X_valid), maxlen=70)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_train = train['Task 2']\n",
    "Y_valid = valid['Task 2']\n",
    "\n",
    "Y_train = Y_train.apply(arrayOneHotEncoder).array\n",
    "Y_train = arrayToDataFrame(Y_train)\n",
    "Y_valid = Y_valid.apply(arrayOneHotEncoder).array\n",
    "Y_valid = arrayToDataFrame(Y_valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/tensorflow/python/ops/nn_impl.py:180: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Embedding(len(word_index) + 1,\n",
    "                     300,\n",
    "                     weights=[embedding_matrix],\n",
    "                     input_length=70,\n",
    "                     trainable=False))\n",
    "model.add(GRU(128, activation='sigmoid'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(8, activation='sigmoid'))\n",
    "\n",
    "adam = optimizers.Adam(learning_rate=0.01, beta_1=0.9, beta_2=0.999, amsgrad=False)\n",
    "model.compile(loss='binary_crossentropy', optimizer=adam, metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /home/pikka/Documents/Code/aicup/venv/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n",
      "\n",
      "Train on 5250 samples, validate on 1750 samples\n",
      "Epoch 1/100\n",
      "5250/5250 [==============================] - 3s 520us/step - loss: 0.4568 - accuracy: 0.8094 - val_loss: 0.3431 - val_accuracy: 0.8750\n",
      "Epoch 2/100\n",
      "5250/5250 [==============================] - 2s 406us/step - loss: 0.3543 - accuracy: 0.8693 - val_loss: 0.3307 - val_accuracy: 0.8751\n",
      "Epoch 3/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.3386 - accuracy: 0.8757 - val_loss: 0.3253 - val_accuracy: 0.8754\n",
      "Epoch 4/100\n",
      "5250/5250 [==============================] - 2s 412us/step - loss: 0.3289 - accuracy: 0.8777 - val_loss: 0.3181 - val_accuracy: 0.8784\n",
      "Epoch 5/100\n",
      "5250/5250 [==============================] - 2s 440us/step - loss: 0.3196 - accuracy: 0.8812 - val_loss: 0.3102 - val_accuracy: 0.8806\n",
      "Epoch 6/100\n",
      "5250/5250 [==============================] - 2s 406us/step - loss: 0.3112 - accuracy: 0.8833 - val_loss: 0.3057 - val_accuracy: 0.8816\n",
      "Epoch 7/100\n",
      "5250/5250 [==============================] - 2s 405us/step - loss: 0.3047 - accuracy: 0.8852 - val_loss: 0.3016 - val_accuracy: 0.8838\n",
      "Epoch 8/100\n",
      "5250/5250 [==============================] - 2s 432us/step - loss: 0.2959 - accuracy: 0.8874 - val_loss: 0.2998 - val_accuracy: 0.8839\n",
      "Epoch 9/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.2898 - accuracy: 0.8890 - val_loss: 0.2974 - val_accuracy: 0.8846\n",
      "Epoch 10/100\n",
      "5250/5250 [==============================] - 2s 405us/step - loss: 0.2830 - accuracy: 0.8905 - val_loss: 0.2958 - val_accuracy: 0.8861\n",
      "Epoch 11/100\n",
      "5250/5250 [==============================] - 2s 401us/step - loss: 0.2748 - accuracy: 0.8945 - val_loss: 0.2958 - val_accuracy: 0.8855\n",
      "Epoch 12/100\n",
      "5250/5250 [==============================] - 2s 444us/step - loss: 0.2660 - accuracy: 0.8965 - val_loss: 0.2952 - val_accuracy: 0.8856\n",
      "Epoch 13/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.2603 - accuracy: 0.8982 - val_loss: 0.2962 - val_accuracy: 0.8849\n",
      "Epoch 14/100\n",
      "5250/5250 [==============================] - 2s 402us/step - loss: 0.2505 - accuracy: 0.9022 - val_loss: 0.2989 - val_accuracy: 0.8841\n",
      "Epoch 15/100\n",
      "5250/5250 [==============================] - 2s 417us/step - loss: 0.2405 - accuracy: 0.9055 - val_loss: 0.3042 - val_accuracy: 0.8830\n",
      "Epoch 16/100\n",
      "5250/5250 [==============================] - 2s 406us/step - loss: 0.2315 - accuracy: 0.9102 - val_loss: 0.3084 - val_accuracy: 0.8817\n",
      "Epoch 17/100\n",
      "5250/5250 [==============================] - 2s 444us/step - loss: 0.2179 - accuracy: 0.9143 - val_loss: 0.3204 - val_accuracy: 0.8820\n",
      "Epoch 18/100\n",
      "5250/5250 [==============================] - 2s 434us/step - loss: 0.2073 - accuracy: 0.9198 - val_loss: 0.3301 - val_accuracy: 0.8797\n",
      "Epoch 19/100\n",
      "5250/5250 [==============================] - 2s 416us/step - loss: 0.1963 - accuracy: 0.9243 - val_loss: 0.3318 - val_accuracy: 0.8804\n",
      "Epoch 20/100\n",
      "5250/5250 [==============================] - 2s 426us/step - loss: 0.1820 - accuracy: 0.9307 - val_loss: 0.3474 - val_accuracy: 0.8791\n",
      "Epoch 21/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.1709 - accuracy: 0.9340 - val_loss: 0.3854 - val_accuracy: 0.8754\n",
      "Epoch 22/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.1657 - accuracy: 0.9369 - val_loss: 0.3746 - val_accuracy: 0.8741\n",
      "Epoch 23/100\n",
      "5250/5250 [==============================] - 2s 402us/step - loss: 0.1489 - accuracy: 0.9440 - val_loss: 0.3962 - val_accuracy: 0.8744\n",
      "Epoch 24/100\n",
      "5250/5250 [==============================] - 2s 451us/step - loss: 0.1373 - accuracy: 0.9491 - val_loss: 0.4079 - val_accuracy: 0.8714\n",
      "Epoch 25/100\n",
      "5250/5250 [==============================] - 2s 413us/step - loss: 0.1290 - accuracy: 0.9523 - val_loss: 0.4336 - val_accuracy: 0.8765\n",
      "Epoch 26/100\n",
      "5250/5250 [==============================] - 2s 430us/step - loss: 0.1265 - accuracy: 0.9538 - val_loss: 0.4140 - val_accuracy: 0.8691\n",
      "Epoch 27/100\n",
      "5250/5250 [==============================] - 2s 401us/step - loss: 0.1214 - accuracy: 0.9557 - val_loss: 0.4268 - val_accuracy: 0.8763\n",
      "Epoch 28/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.1045 - accuracy: 0.9615 - val_loss: 0.4641 - val_accuracy: 0.8740\n",
      "Epoch 29/100\n",
      "5250/5250 [==============================] - 2s 402us/step - loss: 0.0939 - accuracy: 0.9661 - val_loss: 0.5023 - val_accuracy: 0.8696\n",
      "Epoch 30/100\n",
      "5250/5250 [==============================] - 2s 452us/step - loss: 0.0837 - accuracy: 0.9714 - val_loss: 0.5152 - val_accuracy: 0.8639\n",
      "Epoch 31/100\n",
      "5250/5250 [==============================] - 2s 421us/step - loss: 0.0778 - accuracy: 0.9723 - val_loss: 0.5315 - val_accuracy: 0.8674\n",
      "Epoch 32/100\n",
      "5250/5250 [==============================] - 2s 433us/step - loss: 0.0771 - accuracy: 0.9726 - val_loss: 0.5702 - val_accuracy: 0.8672\n",
      "Epoch 33/100\n",
      "5250/5250 [==============================] - 2s 414us/step - loss: 0.0761 - accuracy: 0.9734 - val_loss: 0.5364 - val_accuracy: 0.8661\n",
      "Epoch 34/100\n",
      "5250/5250 [==============================] - 2s 450us/step - loss: 0.0655 - accuracy: 0.9781 - val_loss: 0.5581 - val_accuracy: 0.8669\n",
      "Epoch 35/100\n",
      "5250/5250 [==============================] - 2s 436us/step - loss: 0.0571 - accuracy: 0.9798 - val_loss: 0.6007 - val_accuracy: 0.8653\n",
      "Epoch 36/100\n",
      "5250/5250 [==============================] - 2s 429us/step - loss: 0.0552 - accuracy: 0.9815 - val_loss: 0.6023 - val_accuracy: 0.8642\n",
      "Epoch 37/100\n",
      "5250/5250 [==============================] - 2s 450us/step - loss: 0.0500 - accuracy: 0.9837 - val_loss: 0.6077 - val_accuracy: 0.8640\n",
      "Epoch 38/100\n",
      "5250/5250 [==============================] - 2s 414us/step - loss: 0.0499 - accuracy: 0.9837 - val_loss: 0.6187 - val_accuracy: 0.8653\n",
      "Epoch 39/100\n",
      "5250/5250 [==============================] - 2s 454us/step - loss: 0.0527 - accuracy: 0.9820 - val_loss: 0.6164 - val_accuracy: 0.8628\n",
      "Epoch 40/100\n",
      "5250/5250 [==============================] - 2s 402us/step - loss: 0.0485 - accuracy: 0.9839 - val_loss: 0.6447 - val_accuracy: 0.8629\n",
      "Epoch 41/100\n",
      "5250/5250 [==============================] - 2s 401us/step - loss: 0.0458 - accuracy: 0.9845 - val_loss: 0.6606 - val_accuracy: 0.8610\n",
      "Epoch 42/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.0414 - accuracy: 0.9868 - val_loss: 0.6485 - val_accuracy: 0.8616\n",
      "Epoch 43/100\n",
      "5250/5250 [==============================] - 2s 433us/step - loss: 0.0387 - accuracy: 0.9872 - val_loss: 0.6769 - val_accuracy: 0.8619\n",
      "Epoch 44/100\n",
      "5250/5250 [==============================] - 2s 448us/step - loss: 0.0349 - accuracy: 0.9886 - val_loss: 0.7017 - val_accuracy: 0.8634\n",
      "Epoch 45/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.0390 - accuracy: 0.9868 - val_loss: 0.6816 - val_accuracy: 0.8604\n",
      "Epoch 46/100\n",
      "5250/5250 [==============================] - 2s 412us/step - loss: 0.0385 - accuracy: 0.9874 - val_loss: 0.7185 - val_accuracy: 0.8609\n",
      "Epoch 47/100\n",
      "5250/5250 [==============================] - 2s 405us/step - loss: 0.0339 - accuracy: 0.9890 - val_loss: 0.7165 - val_accuracy: 0.8620\n",
      "Epoch 48/100\n",
      "5250/5250 [==============================] - 2s 407us/step - loss: 0.0345 - accuracy: 0.9886 - val_loss: 0.7000 - val_accuracy: 0.8633\n",
      "Epoch 49/100\n",
      "5250/5250 [==============================] - 2s 409us/step - loss: 0.0301 - accuracy: 0.9907 - val_loss: 0.7375 - val_accuracy: 0.8621\n",
      "Epoch 50/100\n",
      "5250/5250 [==============================] - 2s 407us/step - loss: 0.0276 - accuracy: 0.9916 - val_loss: 0.7477 - val_accuracy: 0.8592\n",
      "Epoch 51/100\n",
      "5250/5250 [==============================] - 2s 409us/step - loss: 0.0247 - accuracy: 0.9925 - val_loss: 0.7584 - val_accuracy: 0.8578\n",
      "Epoch 52/100\n",
      "5250/5250 [==============================] - 2s 405us/step - loss: 0.0263 - accuracy: 0.9920 - val_loss: 0.7654 - val_accuracy: 0.8586\n",
      "Epoch 53/100\n",
      "5250/5250 [==============================] - 2s 406us/step - loss: 0.0304 - accuracy: 0.9902 - val_loss: 0.7436 - val_accuracy: 0.8609\n",
      "Epoch 54/100\n",
      "5250/5250 [==============================] - 2s 410us/step - loss: 0.0259 - accuracy: 0.9917 - val_loss: 0.7742 - val_accuracy: 0.8583\n",
      "Epoch 55/100\n",
      "5250/5250 [==============================] - 2s 406us/step - loss: 0.0206 - accuracy: 0.9938 - val_loss: 0.7996 - val_accuracy: 0.8627\n",
      "Epoch 56/100\n",
      "5250/5250 [==============================] - 2s 409us/step - loss: 0.0189 - accuracy: 0.9945 - val_loss: 0.8008 - val_accuracy: 0.8589\n",
      "Epoch 57/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.0243 - accuracy: 0.9925 - val_loss: 0.7822 - val_accuracy: 0.8594\n",
      "Epoch 58/100\n",
      "5250/5250 [==============================] - 2s 406us/step - loss: 0.0205 - accuracy: 0.9937 - val_loss: 0.8127 - val_accuracy: 0.8586\n",
      "Epoch 59/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.0285 - accuracy: 0.9915 - val_loss: 0.7882 - val_accuracy: 0.8591\n",
      "Epoch 60/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.0299 - accuracy: 0.9904 - val_loss: 0.7899 - val_accuracy: 0.8609\n",
      "Epoch 61/100\n",
      "5250/5250 [==============================] - 2s 423us/step - loss: 0.0241 - accuracy: 0.9929 - val_loss: 0.7746 - val_accuracy: 0.8581\n",
      "Epoch 62/100\n",
      "5250/5250 [==============================] - 2s 421us/step - loss: 0.0233 - accuracy: 0.9925 - val_loss: 0.7999 - val_accuracy: 0.8589\n",
      "Epoch 63/100\n",
      "5250/5250 [==============================] - 2s 407us/step - loss: 0.0217 - accuracy: 0.9932 - val_loss: 0.8081 - val_accuracy: 0.8591\n",
      "Epoch 64/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.0209 - accuracy: 0.9940 - val_loss: 0.8416 - val_accuracy: 0.8578\n",
      "Epoch 65/100\n",
      "5250/5250 [==============================] - 2s 405us/step - loss: 0.0206 - accuracy: 0.9940 - val_loss: 0.8739 - val_accuracy: 0.8569\n",
      "Epoch 66/100\n",
      "5250/5250 [==============================] - 2s 402us/step - loss: 0.0259 - accuracy: 0.9915 - val_loss: 0.8581 - val_accuracy: 0.8576\n",
      "Epoch 67/100\n",
      "5250/5250 [==============================] - 2s 451us/step - loss: 0.0244 - accuracy: 0.9925 - val_loss: 0.8191 - val_accuracy: 0.8582\n",
      "Epoch 68/100\n",
      "5250/5250 [==============================] - 2s 401us/step - loss: 0.0180 - accuracy: 0.9948 - val_loss: 0.8518 - val_accuracy: 0.8554\n",
      "Epoch 69/100\n",
      "5250/5250 [==============================] - 2s 421us/step - loss: 0.0139 - accuracy: 0.9960 - val_loss: 0.8771 - val_accuracy: 0.8578\n",
      "Epoch 70/100\n",
      "5250/5250 [==============================] - 2s 401us/step - loss: 0.0144 - accuracy: 0.9957 - val_loss: 0.8928 - val_accuracy: 0.8537\n",
      "Epoch 71/100\n",
      "5250/5250 [==============================] - 2s 400us/step - loss: 0.0157 - accuracy: 0.9951 - val_loss: 0.8925 - val_accuracy: 0.8550\n",
      "Epoch 72/100\n",
      "5250/5250 [==============================] - 2s 412us/step - loss: 0.0126 - accuracy: 0.9968 - val_loss: 0.9021 - val_accuracy: 0.8596\n",
      "Epoch 73/100\n",
      "5250/5250 [==============================] - 2s 440us/step - loss: 0.0104 - accuracy: 0.9974 - val_loss: 0.9293 - val_accuracy: 0.8537\n",
      "Epoch 74/100\n",
      "5250/5250 [==============================] - 2s 412us/step - loss: 0.0090 - accuracy: 0.9978 - val_loss: 0.9359 - val_accuracy: 0.8545\n",
      "Epoch 75/100\n",
      "5250/5250 [==============================] - 2s 433us/step - loss: 0.0087 - accuracy: 0.9980 - val_loss: 0.9800 - val_accuracy: 0.8536\n",
      "Epoch 76/100\n",
      "5250/5250 [==============================] - 2s 445us/step - loss: 0.0109 - accuracy: 0.9972 - val_loss: 0.9499 - val_accuracy: 0.8572\n",
      "Epoch 77/100\n",
      "5250/5250 [==============================] - 2s 421us/step - loss: 0.0125 - accuracy: 0.9967 - val_loss: 0.9207 - val_accuracy: 0.8563\n",
      "Epoch 78/100\n",
      "5250/5250 [==============================] - 2s 442us/step - loss: 0.0141 - accuracy: 0.9958 - val_loss: 0.8996 - val_accuracy: 0.8556\n",
      "Epoch 79/100\n",
      "5250/5250 [==============================] - 2s 432us/step - loss: 0.0200 - accuracy: 0.9943 - val_loss: 0.9035 - val_accuracy: 0.8584\n",
      "Epoch 80/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.0185 - accuracy: 0.9942 - val_loss: 0.8895 - val_accuracy: 0.8600\n",
      "Epoch 81/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.0160 - accuracy: 0.9952 - val_loss: 0.9099 - val_accuracy: 0.8584\n",
      "Epoch 82/100\n",
      "5250/5250 [==============================] - 2s 401us/step - loss: 0.0153 - accuracy: 0.9955 - val_loss: 0.9287 - val_accuracy: 0.8549\n",
      "Epoch 83/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.0179 - accuracy: 0.9949 - val_loss: 0.9124 - val_accuracy: 0.8592\n",
      "Epoch 84/100\n",
      "5250/5250 [==============================] - 2s 402us/step - loss: 0.0179 - accuracy: 0.9945 - val_loss: 0.8895 - val_accuracy: 0.8579\n",
      "Epoch 85/100\n",
      "5250/5250 [==============================] - 2s 430us/step - loss: 0.0175 - accuracy: 0.9943 - val_loss: 0.8917 - val_accuracy: 0.8587\n",
      "Epoch 86/100\n",
      "5250/5250 [==============================] - 2s 402us/step - loss: 0.0210 - accuracy: 0.9935 - val_loss: 0.8630 - val_accuracy: 0.8603\n",
      "Epoch 87/100\n",
      "5250/5250 [==============================] - 2s 437us/step - loss: 0.0190 - accuracy: 0.9944 - val_loss: 0.8552 - val_accuracy: 0.8616\n",
      "Epoch 88/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.0130 - accuracy: 0.9961 - val_loss: 0.9187 - val_accuracy: 0.8586\n",
      "Epoch 89/100\n",
      "5250/5250 [==============================] - 2s 401us/step - loss: 0.0101 - accuracy: 0.9975 - val_loss: 0.9409 - val_accuracy: 0.8600\n",
      "Epoch 90/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.0090 - accuracy: 0.9977 - val_loss: 0.9676 - val_accuracy: 0.8587\n",
      "Epoch 91/100\n",
      "5250/5250 [==============================] - 2s 406us/step - loss: 0.0075 - accuracy: 0.9980 - val_loss: 0.9715 - val_accuracy: 0.8594\n",
      "Epoch 92/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.0063 - accuracy: 0.9987 - val_loss: 0.9979 - val_accuracy: 0.8577\n",
      "Epoch 93/100\n",
      "5250/5250 [==============================] - 2s 404us/step - loss: 0.0055 - accuracy: 0.9990 - val_loss: 1.0291 - val_accuracy: 0.8594\n",
      "Epoch 94/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.0051 - accuracy: 0.9987 - val_loss: 1.0340 - val_accuracy: 0.8561\n",
      "Epoch 95/100\n",
      "5250/5250 [==============================] - 2s 401us/step - loss: 0.0053 - accuracy: 0.9987 - val_loss: 1.0634 - val_accuracy: 0.8564\n",
      "Epoch 96/100\n",
      "5250/5250 [==============================] - 2s 440us/step - loss: 0.0058 - accuracy: 0.9987 - val_loss: 1.0353 - val_accuracy: 0.8580\n",
      "Epoch 97/100\n",
      "5250/5250 [==============================] - 2s 402us/step - loss: 0.0056 - accuracy: 0.9988 - val_loss: 1.0141 - val_accuracy: 0.8589\n",
      "Epoch 98/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.0073 - accuracy: 0.9981 - val_loss: 1.0213 - val_accuracy: 0.8576\n",
      "Epoch 99/100\n",
      "5250/5250 [==============================] - 2s 403us/step - loss: 0.0193 - accuracy: 0.9945 - val_loss: 0.9143 - val_accuracy: 0.8606\n",
      "Epoch 100/100\n",
      "5250/5250 [==============================] - 2s 422us/step - loss: 0.0277 - accuracy: 0.9912 - val_loss: 0.8508 - val_accuracy: 0.8654\n"
     ]
    }
   ],
   "source": [
    "es = EarlyStopping(monitor='val_loss', patience=10, verbose=1)\n",
    "history = model.fit(X_train_seq, y=Y_train, batch_size=512, epochs=100, verbose=1, validation_data=(X_valid_seq, Y_valid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# summarize history for accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()\n",
    "# summarize history for loss\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "output = model.predict(X_valid_seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'THEORETICAL'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "encoder.inverse_transform(output[3].reshape(1, -1))[0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "total = 0\n",
    "right = 0\n",
    "outputLabel = pd.Series()\n",
    "for index in range(output.shape[0]):\n",
    "    total += 1 \n",
    "    if np.argmax(np.array(Y_valid.iloc[index])) == np.argmax(output[index]):\n",
    "        right += 1\n",
    "    outputLabel.at[outputLabel.size] = encoder.inverse_transform(output[index].reshape(1, -1))[0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.376\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7efa941ada90>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(right/total)\n",
    "outputLabel.value_counts().plot(kind='barh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "output = model.predict(X_train_seq)\n",
    "\n",
    "total = 0\n",
    "right = 0\n",
    "outputLabel = pd.Series()\n",
    "for index in range(output.shape[0]):\n",
    "    total += 1 \n",
    "    if np.argmax(np.array(Y_train.iloc[index])) == np.argmax(output[index]):\n",
    "        right += 1\n",
    "    outputLabel.at[outputLabel.size] = encoder.inverse_transform(output[index].reshape(1, -1))[0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9887619047619047\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "outputLabel.value_counts().plot(kind='barh')\n",
    "print(right/total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "testAbstractCol = test['Abstract']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "testAbstractCol = testAbstractCol.str.lower()\n",
    "testAbstractCol = testAbstractCol.apply(cleanPunc)\n",
    "testAbstractCol = testAbstractCol.apply(keepAlpha)\n",
    "testAbstractCol = testAbstractCol.apply(removeStopWords)\n",
    "testAbstractCol = testAbstractCol.apply(stemming)\n",
    "\n",
    "testAbstractCol_seq = sequence.pad_sequences(token.texts_to_sequences(testAbstractCol), maxlen=70)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "output = model.predict(testAbstractCol_seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "outputLabel = pd.Series()\n",
    "for index in range(output.shape[0]):\n",
    "    outputLabel.at[outputLabel.size] = encoder.inverse_transform(output[index].reshape(1, -1))[0, 0]\n",
    "    labels = encoder.inverse_transform([output[index]])[0][0].split()\n",
    "    for label in labels:\n",
    "        submission.at[index, label] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7efa6c3d2dd8>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "outputLabel.value_counts().plot(kind='barh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>THEORETICAL</th>\n",
       "      <th>ENGINEERING</th>\n",
       "      <th>EMPIRICAL</th>\n",
       "      <th>OTHERS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T00001</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T00002</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T00003</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T00004</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T00005</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  order_id  THEORETICAL  ENGINEERING  EMPIRICAL  OTHERS\n",
       "0   T00001            0            1          0       1\n",
       "1   T00002            0            1          0       1\n",
       "2   T00003            1            1          0       0\n",
       "3   T00004            1            0          0       0\n",
       "4   T00005            0            1          0       0"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission.to_csv(\"submission1.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Classification metrics can't handle a mix of multilabel-indicator and continuous-multioutput targets",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-70-122ad8ae1360>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY_valid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/Documents/Code/aicup/venv/lib/python3.6/site-packages/sklearn/metrics/classification.py\u001b[0m in \u001b[0;36mconfusion_matrix\u001b[0;34m(y_true, y_pred, labels, sample_weight)\u001b[0m\n\u001b[1;32m    251\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    252\u001b[0m     \"\"\"\n\u001b[0;32m--> 253\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    254\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_type\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"binary\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"multiclass\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"%s is not supported\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/Code/aicup/venv/lib/python3.6/site-packages/sklearn/metrics/classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m         raise ValueError(\"Classification metrics can't handle a mix of {0} \"\n\u001b[0;32m---> 81\u001b[0;31m                          \"and {1} targets\".format(type_true, type_pred))\n\u001b[0m\u001b[1;32m     82\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m     \u001b[0;31m# We can't have more than one value on y_type => The set is no more needed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Classification metrics can't handle a mix of multilabel-indicator and continuous-multioutput targets"
     ]
    }
   ],
   "source": [
    "print(metrics.confusion_matrix(Y_valid, output))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label1</th>\n",
       "      <th>label2</th>\n",
       "      <th>label3</th>\n",
       "      <th>label4</th>\n",
       "      <th>label5</th>\n",
       "      <th>label6</th>\n",
       "      <th>label7</th>\n",
       "      <th>label8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1749</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1748</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1747</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1746</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1745</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1750 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      label1  label2  label3  label4  label5  label6  label7  label8\n",
       "1749     0.0     0.0     0.0     1.0     0.0     0.0     0.0     0.0\n",
       "1748     0.0     1.0     0.0     0.0     0.0     0.0     0.0     0.0\n",
       "1747     0.0     0.0     0.0     0.0     1.0     0.0     0.0     0.0\n",
       "1746     0.0     0.0     0.0     0.0     1.0     0.0     0.0     0.0\n",
       "1745     1.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0\n",
       "...      ...     ...     ...     ...     ...     ...     ...     ...\n",
       "4        0.0     0.0     1.0     0.0     0.0     0.0     0.0     0.0\n",
       "3        1.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0\n",
       "2        0.0     1.0     0.0     0.0     0.0     0.0     0.0     0.0\n",
       "1        0.0     0.0     0.0     0.0     0.0     1.0     0.0     0.0\n",
       "0        0.0     0.0     0.0     0.0     1.0     0.0     0.0     0.0\n",
       "\n",
       "[1750 rows x 8 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_valid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# confusion matrix for pricision, recall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
